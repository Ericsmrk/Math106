group_by(region) %>%
summarize(inf_mortality = mean(infant_mortality, na.rm = T)) #takes mean of inf mortality from 1960-2016 of each region
ggplot(year1, aes(x = inf_mortality, y = region)) + geom_bin_2d()
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
year1
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
?year1
?arrange
year1
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality1 = mean(infant_mortality, na.rm = T)) %>%#takes mean of inf mortality from 1960-2016 of each region
arrange(desc(inf_mortality1)) %>%
ggplot(aes(x = inf_mortality1, y = region)) + geom_bin_2d()
year1
year1
ggplot(aes(x = inf_mortality1, y = region)) + geom_bin_2d()
year1
gapminder %>%
group_by(region) %>%
summarize(inf_mortality1 = mean(infant_mortality, na.rm = T)) %>%#takes mean of inf mortality from 1960-2016 of each region
arrange(desc(inf_mortality1)) %>%
ggplot(aes(x = inf_mortality1, y = region)) + geom_bin_2d()
year1
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality1 = mean(infant_mortality, na.rm = T)) %>%#takes mean of inf mortality from 1960-2016 of each region
ggplot(aes(x = inf_mortality1, y = region)) + geom_bin_2d()
year1
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality1 = mean(infant_mortality, na.rm = T)) %>%#takes mean of inf mortality from 1960-2016 of each region
ggplot(aes(x = inf_mortality1, y = region)) + geom_bin_2d()
year1
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
year1
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
year1
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality = mean(infant_mortality, na.rm = T)) %>%#takes mean of inf mortality from 1960-2016 of each region
arrange()
#ggplot(aes(x = inf_mortality, y = region)) + geom_bin_2d()
year1
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality = mean(infant_mortality, na.rm = T)) %>%#takes mean of inf mortality from 1960-2016 of each region
arrange(inf_mortality)
#ggplot(aes(x = inf_mortality, y = region)) + geom_bin_2d()
year1
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality = mean(infant_mortality, na.rm = T)) %>%#takes mean of inf mortality from 1960-2016 of each region
arrange(inf_mortality)
ggplot(year1, aes(x = inf_mortality, y = region)) + geom_bin_2d()
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
ggplot(year1, aes(x = inf_mortality, y = region)) + geom_bin_2d()
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality = mean(infant_mortality, na.rm = T))
ggplot(year1, aes(x = inf_mortality, y = region)) + geom_bar(stat = "identity")
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
year1 <- gapminder %>%
group_by(region) %>%
summarize(inf_mortality = mean(infant_mortality, na.rm = T))
arrange(gapminder, year1)
source("C:/Users/Erics/Desktop/Fall22/Math 105/1/reg inf.R", echo=TRUE)
str_subset(string = heights, pattern = "\\d\' \\d\"") # with space
library(stringr)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/11 2.R", echo=TRUE)
source("C:/Users/Erics/Desktop/Fall22/Math 105/11 2.R", echo=TRUE)
str_subset(string = heights, pattern = "\\d\' \\d\"") # with space
View(reported_heights)
str_subset(string = heights, pattern = "\\d\' \\d\"") # with space
str_detect(heights, "'")
View(heights)
library(tidyverse)
library(dslabs)
data(reported_heights)
View(heights)
View(reported_heights$height)
hts <- select(reported_heights$height)
hts <- select(reported_heights,height)
View(hts)
View(hts)
str_detect(hts, "'")
str_detect(hts, "'")
hts <- select(reported_heights,height)
gsub('\'','',hts)
hts <- select(reported_heights,height)
hts2 <- gsub('\'','',hts)
hts <- select(reported_heights,height)
hts2 <- gsub('^[:alnum:]','',hts)
View(hts)
str_subset(hts, pattern = "\\d\' \\d\"") # with space
hts2 <- str_subset(hts, pattern = "\\d\' \\d\"") # with space
htsb <- hts
hts$height <- str_replace(hts$height, "'", "")
view(hts)
hts_total <= c(hts,htsb)
hts_total <- c(hts,htsb)
View(hts_total)
hts_total <- c(hts$height,htsb$height)
View(hts_total)
hts_total <- left_join(hts$height,htsb$height)
View(hts,htsb)
data(reported_heights)
hts <- select(reported_heights,height)
htsb <- hts
data(reported_heights)
hts <- select(reported_heights,height)
htsb <- hts
View(hts)
View(htsb)
data.frame(hts,htsb)
hts_total <- (hts,htsb)
hts_compare <- data.frame(hts,htsb)
View(hts_compare)
as.integer(str_extract(htsb, "\\d+"))
as.integer(str_extract(htsb$height, "\\d+"))
htsb$height <- str_replace(htsb$height, "\\d+'", "")
hts_compare <- data.frame(hts,htsb)
View(hts_compare)
data(reported_heights)
htsa <- select(reported_heights,height) #original heights
htsb <- htsa #new heights to alter
to_mul <- as.integer(str_extract(htsb$height, "\\d+"))
mulled <- to_mul*12
view(mulled)
htsa <- select(reported_heights,height) #original heights
htsb <- htsa #new heights to alter
htsb$height <- str_replace(htsb$height, "\\d+'", ""*12)
htsa <- select(reported_heights,height) #original heights
htsb <- htsa #new heights to alter
to_mul <- as.integer(str_extract(htsb$height, "\\d'"))
to_mul <- as.integer(str_extract(htsb$height, "\\d+'"))
to_mul <- as.integer(str_extract(htsb$height, "\\d'"))
library(tidyverse)
library(dslabs)
data(reported_heights)
htsa <- select(reported_heights,height) #original heights
htsb <- htsa #new heights to alter
to_mul <- as.integer(str_extract(htsb$height, "\\d'"))
mulled <- to_mul*12
view(mulled)
to_mul <- as.integer(str_extract(htsb$height, "\\d+"))
htsa <- select(reported_heights,height) #original heights
htsb <- htsa #new heights to alter
to_mul <- as.integer(str_extract(htsb$height, "\\d+"))
mulled <- to_mul*12
view(mulled)
view(to_mul)
htsa <- select(reported_heights,height) #original heights
htsb <- htsa #new heights to alter
to_mul <- as.integer(str_extract(htsb$height, "\\d+"))
view(to_mul)
View(htsa)
View(htsa)
to_mul <- as.integer(str_extract(htsb$height, "\\d'"))
htsb$height <- str_replace(htsb$height, "\\d'", "l")
htsb$height <- str_replace(htsb$height, "\\d'", "l")
hts_compare <- data.frame(hts,htsb)
hts_compare <- data.frame(htsa,htsb)
View(hts_compare)
htsb$height <- str_replace(htsb$height, "\\d'", as.integer("l")*12)
hts_compare <- data.frame(htsa,htsb)
View(hts_compare)
htsb$height <- str_replace(htsb$height, "\\d'", as.integer("d")*12)
View(hts_compare)
htsb$height <- str_replace(htsb$height, "\\d'", as.integer(""))
htsb$height <- str_replace(htsb$height, "\\d'", "")
hts_compare <- data.frame(htsa,htsb)
View(hts_compare)
View(hts_compare)
data(reported_heights)
htsa <- select(reported_heights,height) #original heights
htsb <- htsa #new heights to alter
source("~/.active-rstudio-document", echo=TRUE)
install.packages("mlbench")
library(mlbench)
data(BostonHousing2)
?BostonHousing2
summary(BostonHousing2)
ggplot(BostonHousing2,mapping = aes(y=medv,x=rm)) +
geom_point() +
xlab("Average number of Rooms") +
ylab("Median House Price")
summary(BostonHousing2)
summary(BostonHousing2)
?BostonHousing2
ggplot(BostonHousing2,mapping = aes(y=medv,x=age)) +
geom_point() +
xlab("Average number of Rooms") +
ylab("Median House Price")
?BostonHousing2
?housing
?Boston
housing <- Boston
housing <- BostonHousing2
housing <- BostonHousing2
View(housing)
housing <- BostonHousing2
View(housing)
housing <- BostonHousing2
str(housing) #gives the structure of data
head(housing) #returns the first six rows of data
summary(housing) #gives the basic statistics of your dataset like mean, median, 1st quartile, 2nd quartile etc.
lm.fit1 <- lm(medv~.,data=train)
set.seed(123)
split <- sample.split(housing,SplitRatio = 0.25)
library(MASS)
set.seed(123)
split <- sample.split(housing,SplitRatio = 0.25)
data(cats)
split <- sample(housing,SplitRatio = 0.25)
install.packages('readr')
install.packages('ggplot2')
install.packages('mlbench')
install.packages('corrplot')
install.packages('Amelia')
install.packages('caret')
install.package('plotly')
install.packages("readr")
install.packages("ggplot2")
install.packages("mlbench")
install.packages("caret")
library(readr)
library(ggplot2)
library(corrplot)
library(mlbench)
library(Amelia)
library(plotly)
set.seed(123)
split <- sample(housing,SplitRatio = 0.25)
missmap(housing,col=c('yellow','black'),y.at=1,y.labels='',legend=TRUE)
corrplot(cor(select(housing,-chas)))
corrplot(cor(select(housing,chas)))
corrplot(cor(select(housing,chas)))
corrplot(cor(select(housing)))
housing <- BostonHousing2
corrplot(cor(select(housing)))
library(corrplot)
corrplot(cor(select(housing)))
corrplot(cor(housing))
H <- cor(housing)
corrplot(cor(housing),method = 'number')
H <- cor(housing)
housing <- BostonHousing2
View(housing)
View(housing)
View(housing)
housing <- data.frame(BostonHousing2)
H <- cor(housing)
data <- data.frame(BostonHousing2)
H <- cor(data)
housing <- BostonHousing2
sapply(housing, is.numeric)
cor(data[, unlist(lapply(housing, is.numeric))])
sapply(housing, is.numeric)
H <- cor(data[, unlist(lapply(housing, is.numeric))])
corrplot(H,method = 'number')
corrplot(H)
H <- cor(data[, unlist(lapply(housing, is.numeric))])
corrplot(H)
housing <- BostonHousing2
sapply(housing, is.numeric) #Yes we have bad data
corrplot.mixed(H)
corrplot.mixed(H)
set.seed(123)
split <- sample(housing,SplitRatio = 0.25)
library(caTools)
install.packages('caTools')
library(caTools)
set.seed(123)
split <- sample.(housing,SplitRatio = 0.25)
set.seed(123)
split <- sample.split(housing,SplitRatio = 0.25)
train <- subset(housing,split==TRUE)
test <- subset(housing,split==FALSE)
lm.fit1 <- lm(medv~.,data=train)
summary(lm.fit1)
lm.fit1 <- lm(medv~rm,data=train)
summary(lm.fit1)
ggplot(BostonHousing2,mapping = aes(y=medv,x=age)) +
geom_point() +
xlab("Average number of Rooms") +
ylab("Median House Price")
ggplot(BostonHousing2,mapping = aes(y=medv,x=rooms)) +
geom_point() +
xlab("Average number of Rooms") +
ylab("Median House Price")
ggplot(BostonHousing2,mapping = aes(y=medv,x=rms)) +
geom_point() +
xlab("Average number of Rooms") +
ylab("Median House Price")
View(BostonHousing2)
ggplot(BostonHousing2,mapping = aes(y=medv,x=rm)) +
geom_point() +
xlab("Average number of Rooms") +
ylab("Median House Price")
res <- residuals(model)
res <- residuals(fit1)
#make datafrome from residuals
res <- residuals(im.fit1)
#make datafrome from residuals
res <- residuals(lm.fit1)
res <- as.data.frame(res)
ggplot(res,aes(res)) +  geom_histogram(fill='blue',alpha=0.5)
ggplot(res,aes(res)) +  geom_histogram(fill='red',alpha=0.2)
#make datafrome from residuals
res <- residuals(lm.fit1)
res <- as.data.frame(res)
ggplot(res,aes(res)) +  geom_histogram(fill='red',alpha=0.2, binwidth = 10)
#make datafrome from residuals
res <- residuals(lm.fit1)
res <- as.data.frame(res)
ggplot(res,aes(res)) +  geom_histogram(fill='red',alpha=0.2, binwidth = 5)
plot(lm)
plot(lm.fit1)
ggplot(res,aes(res)) +  geom_histogram(fill='red',alpha=0.2, binwidth = 5)
ggplot(res,aes(res)) +  geom_histogram(fill='red',alpha=0.2, binwidth = 1)
ggplot(res,aes(res)) +  geom_histogram(fill='red',alpha=0.5, binwidth = 1)
plot(lm.fit1)
plot(lm.fit1)
test$predicted.medv <- predict(lm.fit1,test)
pl1 <-test %>%
ggplot(aes(medv,predicted.medv)) +
geom_point(alpha=0.5) +
stat_smooth(aes(colour='black')) +
xlab('Actual value of medv') +
ylab('Predicted value of medv')+
theme_bw()
ggplotly(pl1)
pl1 <-test %>%
ggplot(aes(medv,predicted.medv)) +
geom_point(alpha=0.5) +
stat_smooth(aes(colour='black')) +
xlab('Actual value of medv') +
ylab('Predicted value of medv')+
theme_bw()
pl1
test$predicted.medv <- predict(lm.fit1,test)
machineIsLearning <-test %>%
ggplot(aes(medv,predicted.medv)) +
geom_point(alpha=0.5) +
stat_smooth(aes(colour='black')) +
xlab('Actual value of medv') +
ylab('Predicted value of medv')+
theme_bw()
machineIsLearning
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
## Load appropriate packages
library(knitr)
library(tidyverse) #ggplot2 dplyr tidyr readr
install.packages(c("Amelia", "bit", "bslib", "callr", "cli", "cpp11", "crayon", "curl", "data.table", "digest", "dplyr", "evaluate", "gargle", "ggplot2", "globals", "gtable", "isoband", "jsonlite", "knitr", "lubridate", "modelr", "openssl", "pkgload", "processx", "ps", "purrr", "RCurl", "readr", "rlang", "rmarkdown", "sass", "sys", "testthat", "tidyr", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("Amelia", "bit", "bslib", "callr", "cli", "cpp11", "crayon", "curl", "data.table", "digest", "dplyr", "evaluate", "gargle", "ggplot2", "globals", "gtable", "isoband", "jsonlite", "knitr", "lubridate", "modelr", "openssl", "pkgload", "processx", "ps", "purrr", "RCurl", "readr", "rlang", "rmarkdown", "sass", "sys", "testthat", "tidyr", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("Amelia", "bit", "bslib", "callr", "cli", "cpp11", "crayon", "curl", "data.table", "digest", "dplyr", "evaluate", "gargle", "ggplot2", "globals", "gtable", "isoband", "jsonlite", "knitr", "lubridate", "modelr", "openssl", "pkgload", "processx", "ps", "purrr", "RCurl", "readr", "rlang", "rmarkdown", "sass", "sys", "testthat", "tidyr", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("Amelia", "bit", "bslib", "callr", "cli", "cpp11", "crayon", "curl", "data.table", "digest", "dplyr", "evaluate", "gargle", "ggplot2", "globals", "gtable", "isoband", "jsonlite", "knitr", "lubridate", "modelr", "openssl", "pkgload", "processx", "ps", "purrr", "RCurl", "readr", "rlang", "rmarkdown", "sass", "sys", "testthat", "tidyr", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("Amelia", "bit", "bslib", "callr", "cli", "cpp11", "crayon", "curl", "data.table", "digest", "dplyr", "evaluate", "gargle", "ggplot2", "globals", "gtable", "isoband", "jsonlite", "knitr", "lubridate", "modelr", "openssl", "pkgload", "processx", "ps", "purrr", "RCurl", "readr", "rlang", "rmarkdown", "sass", "sys", "testthat", "tidyr", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages("keras")
library(keras)
install_keras(envname = "r-reticulate")
y
library(tensorflow)
tf$constant("Hello Tensorflow!")
library(tensorflow)
tf$constant("Hello Tensorflow!")
library(tensorflow)
tf$constant("Hello Tensorflow!")
library(keras)
tf$constant("Hello Tensorflow!")
c(c(x_train, y_train), c(x_test, y_test)) %<-% keras::dataset_mnist()
x_train <- x_train / 255
x_test <-  x_test / 255
model <- keras_model_sequential(input_shape = c(28, 28)) %>%
layer_flatten() %>%
layer_dense(128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10)
predictions <- predict(model, x_train[1:2, , ])
predictions
tf$nn$softmax(predictions)
loss_fn <- loss_sparse_categorical_crossentropy(from_logits = TRUE)
loss_fn(y_train[1:2], predictions)
model %>% compile(
optimizer = "adam",
loss = loss_fn,
metrics = "accuracy"
)
model %>% fit(x_train, y_train, epochs = 5)
model %>% evaluate(x_test,  y_test, verbose = 2)
probability_model <- keras_model_sequential() %>%
model() %>%
layer_activation_softmax() %>%
layer_lambda(tf$argmax)
probability_model(x_test[1:5, , ])
tf_function(loss_fn)
tf_function(loss_fn)
tf_function(loss_fn)
summary(model)
summary(probability_model)
model %>% fit(x_train, y_train, epochs = 5)
model %>% evaluate(x_test,  y_test, verbose = 2)
install.packages("keras")
library(keras)
install_keras(envname = "r-reticulate")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
tf$constant("Hello Tensorflow!")
tf$constant("Hello Tensorflow!")
clear
clr
tf$constant("Hello Tensorflow!")
tf$constant("Hello Tensorflow!")
tf$constant("Hello Tensorflow!")
x <- as_tensor(seq(-2, 2, length.out = 201), "float32")
f <- function(x)
x^2 + 2*x - 5
ground_truth <- f(x)
y <- ground_truth + tf$random$normal(shape(201))
x %<>% as.array()
y %<>% as.array()
ground_truth %<>% as.array()
plot(x, y, type = 'p', col = "deepskyblue2", pch = 19)
lines(x, ground_truth, col = "tomato2", lwd = 3)
legend("topleft",
col = c("deepskyblue2", "tomato2"),
lty = c(NA, 1), lwd = 3,
pch = c(19, NA),
legend = c("Data", "Ground Truth"))
View(x)
x <- as_tensor(seq(-2, 2, length.out = 201), "float32")
ggplot(x)
library(ggplot2)
ggplot(x)
f <- function(x)
x^2 + 2*x - 5
ground_truth <- f(x)
y <- ground_truth + tf$random$normal(shape(201))
x %<>% as.array()
y %<>% as.array()
ground_truth %<>% as.array()
plot(x, y, type = 'p', col = "deepskyblue2", pch = 19)
lines(x, ground_truth, col = "tomato2", lwd = 3)
legend("topleft",
col = c("deepskyblue2", "tomato2"),
lty = c(NA, 1), lwd = 3,
pch = c(19, NA),
legend = c("Data", "Ground Truth"))
names(tf$dtypes)
library(keras)
library(tensorflow)
db <- dataset_mnist()
c(c(x_train, y_train), c(x_test, y_test)) %<-% db
x_train <- x_train / 255
x_test <-  x_test / 255
model <- keras_model_sequential(input_shape = c(28, 28)) %>%
layer_flatten() %>%
layer_dense(128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10)
model
summary(model)
predictions <- predict(model, x_train[1:2, , ])
tf$nn$softmax(predictions)
loss_fn <- loss_sparse_categorical_crossentropy(from_logits = TRUE)
loss_fn(y_train[1:2], predictions)
model %>% compile(
optimizer = "adam",
loss = loss_fn,
metrics = "accuracy"
)
model %>% fit(x_train, y_train, epochs = 5)
model %>% evaluate(x_test,  y_test, verbose = 2)
names(tf$dtypes)
scalar <- as_tensor(4, dtype = int32)
scalar <- as_tensor(4, dtype = "int32")
aVector <- as_tensor(c(45:50), dtype = "int32")
setwd("C:/Users/Erics/Desktop/Spring22/Math 106/code")
library(faraway)
library()
head(pima)
summary(pima)
summary(pima)
sort(pima$diastolic)
pima$diastolic[pima$diastolic == 0] <- NA
sort(pima$diastolic)
sort(pima$glucose)
pima$glucose[pima$glucose == 0] <- NA
sort(pima$glucose)
pima$glucose[pima$glucose == 0] <- NA
pima$triceps[pima$triceps == 0] <- NA
pima$insulin[pima$insulin == 0] <- NA
pima$bmi[pima$bmi == 0] <- NA
summary(pima)
pima$test
pima$test <- factor(pima$test)
pima$test
levels(pima$test) <- factor(pima$test)
pima$test
summary(pima)
